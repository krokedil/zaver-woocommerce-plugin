name: Create Dev Zip

on:
  workflow_dispatch:
    inputs:
      INSTAWP_SITE_ID:
        description: 'InstaWP Site ID (1466322 is zaver-checkout-test.krokedil.site)'
        required: false
        default: '1466322'
  push:
    branches:
      - deploy-payment-methods

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PLUGIN_SLUG: zaver-checkout-for-woocommerce
      PLUGIN_MAIN_FILE: woocommerce-zaver-checkout.php
      # Set INSTAWP_SITE_ID based on the event type and branch
      INSTAWP_SITE_ID: ${{ github.event_name == 'push' && github.ref == 'refs/heads/deploy-payment-methods' && '1466322' || github.event.inputs.INSTAWP_SITE_ID }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Create composer cache directory
      run: mkdir -p ~/.composer/cache

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install dependencies and build project
      run: |
        mkdir -p ~/.composer/cache
        composer install --prefer-dist --no-progress

    - name: Get branch name and commit hash
      id: vars
      run: |
        BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
        COMMIT_HASH=$(git rev-parse --short HEAD)
        ZIP_FILE_NAME="${{ env.PLUGIN_SLUG }}-dev-${BRANCH_NAME}-${COMMIT_HASH}.zip"
        echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
        echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
        echo "ZIP_FILE_NAME=${ZIP_FILE_NAME}" >> $GITHUB_ENV

    - name: Modify version, prepare zip directory, and create zip file
      run: |
        sed -i "s/^ \* Version: \(.*\)/ \* Version: \1-dev.${BRANCH_NAME}.${COMMIT_HASH}/" ${{ env.PLUGIN_MAIN_FILE }}
        mkdir -p dev-zip-temp/${{ env.PLUGIN_SLUG }}
        rsync -av --exclude-from='.distignore' --exclude='dev-zip-temp' . dev-zip-temp/${{ env.PLUGIN_SLUG }}
        cd dev-zip-temp
        zip -r ../${{ env.ZIP_FILE_NAME }} ${{ env.PLUGIN_SLUG }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_KROKEDIL_PLUGIN_DEV_ZIP }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_KROKEDIL_PLUGIN_DEV_ZIP }}
        aws-region: eu-north-1

    - name: Upload to S3
      run: |
        aws s3 cp ${{ env.ZIP_FILE_NAME }} s3://krokedil-plugin-dev-zip/${{ env.ZIP_FILE_NAME }}

    - name: Add annotation to workflow run with dev zip url
      if: env.INSTAWP_SITE_ID == ''
      run: echo "::notice::Dev Zip Url available for 30 days, https://krokedil-plugin-dev-zip.s3.eu-north-1.amazonaws.com/${{ env.ZIP_FILE_NAME }}"

    - name: Install plugin on InstaWP site
      if: env.INSTAWP_SITE_ID != ''
      run: |
        curl -X POST "https://app.instawp.io/api/v2/sites/${{ env.INSTAWP_SITE_ID }}/execute-command" \
        -H "Authorization: Bearer ${{ secrets.INSTAWP_API_TOKEN }}" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        -d '{"command_id":2114,"commandArguments":[{"dev_zip_public_url":"https://krokedil-plugin-dev-zip.s3.eu-north-1.amazonaws.com/${{ env.ZIP_FILE_NAME }}"}]}'

    - name: Delete uploaded zip from S3
      if: env.INSTAWP_SITE_ID != ''
      run: |
        aws s3 rm s3://krokedil-plugin-dev-zip/${{ env.ZIP_FILE_NAME }}

    - name: Add annotation for InstaWP installation
      if: env.INSTAWP_SITE_ID != ''
      run: echo "::notice::The dev zip plugin has been pushed to the InstaWP site ID ${{ github.event.inputs.INSTAWP_SITE_ID }}"
