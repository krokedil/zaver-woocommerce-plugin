<?php
namespace Zaver;

use Exception;
use Zaver\SDK\Config\ItemType;
use Zaver\SDK\Object\PaymentCreationRequest;
use Zaver\SDK\Object\MerchantUrls;
use Zaver\SDK\Object\LineItem;
use WC_Order;
use WC_Order_Item_Coupon;
use WC_Order_Item_Fee;
use WC_Order_Item_Product;
use WC_Order_Item_Shipping;
use Zaver\SDK\Config\PaymentStatus;
use Zaver\SDK\Object\PaymentStatusResponse;

class Payment_Processor {
	static public function process(WC_Order $order): void {
		$payment = PaymentCreationRequest::create()
			->setMerchantPaymentReference($order->get_order_number())
			->setAmount($order->get_total())
			->setCurrency($order->get_currency())
			->setMarket($order->get_billing_country())
			->setMerchantMetadata([
				'originPlatform' => 'woocommerce',
				'originWebsite' => home_url(),
				'originPage' => $order->get_created_via(),
				'customerId' => (string)$order->get_customer_id(),
				'orderId' => (string)$order->get_id(),
			])
			->setTitle(self::get_purchase_title($order));
		
		$merchant_urls = MerchantUrls::create()
			->setSuccessUrl(Plugin::gateway()->get_return_url($order));
		
		if($callback_url = self::get_callback_url($order)) {
			$merchant_urls->setCallbackUrl($callback_url);
		}

		$payment->setMerchantUrls($merchant_urls);
		
		$types = ['line_item', 'shipping', 'fee', 'coupon'];
		
		foreach($order->get_items($types) as $item) {
			$line_item = LineItem::create()
				->setName($item->get_name())
				->setQuantity($item->get_quantity())
				->setMerchantMetadata(['orderItemId' => $item->get_id()]);
			
			if($item->is_type('line_item')) {
				self::prepare_line_item($line_item, $item);
			}
			elseif($item->is_type('shipping')) {
				self::prepare_shipping($line_item, $item);
			}
			elseif($item->is_type('fee')) {
				self::prepare_fee($line_item, $item);
			}
			elseif($item->is_type('coupon')) {
				self::prepare_coupon($line_item, $item);
			}

			$payment->addLineItem($line_item);
		}

		do_action('zco_before_process_payment', $payment, $order);

		$response = Plugin::gateway()->api()->createPayment($payment);

		$order->update_meta_data('_zaver_payment', [
			'id' => $response->getPaymentId(),
			'token' => $response->getToken(),
			'tokenValidUntil' => $response->getValidUntil()
		]);

		$order->save_meta_data();

		// Save all line item IDs generated by Zaver
		foreach($response->getLineItems() as $item) {
			$meta = $item->getMerchantMetadata();

			if(isset($meta['orderItemId'])) {
				wc_add_order_item_meta($meta['orderItemId'], '_zaver_line_item_id', $item->getId(), true);
			}
		}

		Log::logger()->debug('Created Zaver payment request', ['orderId' => $order->get_id(), 'paymentId' => $response->getPaymentId()]);

		do_action('zco_after_process_payment', $payment, $order, $response);
	}

	static private function get_purchase_title(WC_Order $order): string {
		$items = $order->get_items();

		// If there's only one order item, return it as title
		if(count($items) === 1) {
			$title = reset($items)->get_name();
		}

		// If there's multiple order items, return a generic title
		else {
			$title = sprintf(__('Order %s', 'zco'), $order->get_order_number());
		}

		
		return apply_filters('zco_payment_purchase_title', $title, $order);
	}

	static private function get_callback_url(WC_Order $order): ?string {
		if(!Helper::is_https()) return null;

		return add_query_arg([
			'wc-api' => 'zaver_payment_callback',
			'key' => $order->get_order_key()
		], home_url());
	}

	static private function prepare_line_item(LineItem $zaver_item, WC_Order_Item_Product $wc_item): void {
		$tax = (float)$wc_item->get_total_tax();
		$total_price = (float)$wc_item->get_total() + $tax;
		$unit_price = $total_price / $wc_item->get_quantity();
		$product = $wc_item->get_product();
		
		$zaver_item
			->setUnitPrice($unit_price)
			->setTotalAmount($total_price)
			->setTaxRatePercent(Helper::get_line_item_tax_rate($wc_item))
			->setTaxAmount($tax)
			->setItemType(Helper::get_zaver_item_type($product))
			->setMerchantReference($product->get_sku());
		
		do_action('zco_process_payment_line_item', $zaver_item, $wc_item);
	}

	static private function prepare_shipping(LineItem $zaver_item, WC_Order_Item_Shipping $wc_item): void {
		$tax = (float)$wc_item->get_total_tax();
		$total_price = (float)$wc_item->get_total() + $tax;
		$unit_price = $total_price / $wc_item->get_quantity();
		
		$zaver_item
			->setUnitPrice($unit_price)
			->setTotalAmount($total_price)
			->setTaxRatePercent(Helper::get_line_item_tax_rate($wc_item, true))
			->setTaxAmount($tax)
			->setItemType(ItemType::SHIPPING)
			->setMerchantReference($wc_item->get_method_id());
		
		do_action('zco_process_payment_shipping', $zaver_item, $wc_item);
	}

	static private function prepare_fee(LineItem $zaver_item, WC_Order_Item_Fee $wc_item): void {
		$tax = (float)$wc_item->get_total_tax();
		$total_price = (float)$wc_item->get_total() + $tax;
		$unit_price = $total_price / $wc_item->get_quantity();
		
		$zaver_item
			->setUnitPrice($unit_price)
			->setTotalAmount($total_price)
			->setTaxRatePercent(Helper::get_line_item_tax_rate($wc_item))
			->setTaxAmount($tax)
			->setItemType(ItemType::FEE);

		do_action('zco_process_payment_fee', $zaver_item, $wc_item);
	}

	static private function prepare_coupon(LineItem $zaver_item, WC_Order_Item_Coupon $wc_item): void {
		$tax = (float)$wc_item->get_discount_tax();
		$total_price = (float)$wc_item->get_discount() + $tax;
		$unit_price = $total_price / $wc_item->get_quantity();
		
		$zaver_item
			->setUnitPrice($unit_price)
			->setTotalAmount($total_price)
			->setTaxRatePercent(Helper::get_line_item_tax_rate($wc_item))
			->setTaxAmount($tax)
			->setItemType(ItemType::DISCOUNT);
		
		do_action('zco_process_payment_coupon', $zaver_item, $wc_item);
	}

	static public function handle_response(WC_Order $order, ?PaymentStatusResponse $payment_status = null, bool $redirect = true): void {

		// Ignore orders that are already paid
		if(!$order->needs_payment()) return;

		// Ensure that the order key is correct
		if(!isset($_GET['key']) || !hash_equals($order->get_order_key(), wc_clean(wp_unslash($_GET['key'])))) {
			throw new Exception('Invalid order key');
		}

		$payment = $order->get_meta('_zaver_payment');

		if(empty($payment) || !is_array($payment) || !isset($payment['id'])) {
			throw new Exception('Missing payment ID on order');
		}

		if(is_null($payment_status)) {
			$payment_status = Plugin::gateway()->api()->getPaymentStatus($payment['id']);
		}
		elseif($payment_status->getPaymentId() !== $payment['id']) {
			throw new Exception('Mismatching payment ID');
		}

		do_action('zco_process_payment_handle_response', $order, $payment_status, $redirect);

		switch($payment_status->getPaymentStatus()) {
			case PaymentStatus::SETTLED:
				$order->payment_complete($payment_status->getPaymentId());
				$order->add_order_note(sprintf(__('Successful payment with Zaver - payment ID: %s', 'zco'), $payment_status->getPaymentId()));
				Log::logger()->info('Successful payment with Zaver', ['orderId' => $order->get_id(), 'paymentId' => $payment_status->getPaymentId()]);
				break;
			
			case PaymentStatus::CANCELLED:
				Log::logger()->info('Zaver Payment was cancelled', ['orderId' => $order->get_id(), 'paymentId' => $payment_status->getPaymentId()]);

				if($redirect) {
					wp_redirect($order->get_cancel_order_url());
					exit;
				}
				
				$order->update_status('cancelled', __('Zaver payment was cancelled - cancelling order', 'zco'));
				break;
			
			case PaymentStatus::CREATED:
				Log::logger()->debug('Zaver Payment is still in CREATED state', ['orderId' => $order->get_id(), 'paymentId' => $payment_status->getPaymentId()]);

				if($redirect) {
					wp_redirect($order->get_checkout_payment_url(true));
					exit;
				}

				// Do nothing
				break;
		}
	}
}