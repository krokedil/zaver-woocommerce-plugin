<?php
/**
 * The payment processor class.
 *
 * @package ZCO/Classes
 */

namespace Zaver;

use Exception;
use Zaver\SDK\Config\ItemType;
use Zaver\SDK\Object\PaymentCreationRequest;
use Zaver\SDK\Object\MerchantUrls;
use Zaver\SDK\Object\LineItem;
use WC_Order;
use WC_Order_Item_Coupon;
use WC_Order_Item_Fee;
use WC_Order_Item_Product;
use WC_Order_Item_Shipping;
use Zaver\SDK\Config\PaymentStatus;
use Zaver\SDK\Object\PaymentStatusResponse;

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Class Payment_Processor
 *
 * Handles the payment processing.
 */
class Payment_Processor {

	/**
	 * Process a payment for the given order.
	 *
	 * @param WC_Order $order The order to process the payment for.
	 * @return void
	 */
	public static function process( $order ) {
		$payment = PaymentCreationRequest::create()
			->setMerchantPaymentReference( $order->get_order_number() )
			->setAmount( $order->get_total() )
			->setCurrency( $order->get_currency() )
			->setMarket( $order->get_billing_country() )
			->setMerchantMetadata(
				array(
					'originPlatform' => 'woocommerce',
					'originWebsite'  => home_url(),
					'originPage'     => $order->get_created_via(),
					'customerId'     => (string) $order->get_customer_id(),
					'orderId'        => (string) $order->get_id(),
				)
			)
			->setTitle( self::get_purchase_title( $order ) );

		$merchant_urls = MerchantUrls::create()
			->setSuccessUrl( Plugin::gateway()->get_return_url( $order ) );

		$callback_url = self::get_callback_url( $order );
		if ( ! empty( $callback_url ) ) {
			$merchant_urls->setCallbackUrl( $callback_url );
		}

		$payment->setMerchantUrls( $merchant_urls );

		$types = array( 'line_item', 'shipping', 'fee', 'coupon' );

		foreach ( $order->get_items( $types ) as $item ) {
			$line_item = LineItem::create()
				->setName( $item->get_name() )
				->setQuantity( $item->get_quantity() )
				->setMerchantMetadata( array( 'orderItemId' => $item->get_id() ) );

			if ( $item->is_type( 'line_item' ) ) {
				self::prepare_line_item( $line_item, $item );
			} elseif ( $item->is_type( 'shipping' ) ) {
				self::prepare_shipping( $line_item, $item );
			} elseif ( $item->is_type( 'fee' ) ) {
				self::prepare_fee( $line_item, $item );
			} elseif ( $item->is_type( 'coupon' ) ) {
				self::prepare_coupon( $line_item, $item );
			}

			$payment->addLineItem( $line_item );
		}

		do_action( 'zco_before_process_payment', $payment, $order );

		$response = Plugin::gateway()->api()->createPayment( $payment );

		$order->update_meta_data(
			'_zaver_payment',
			array(
				'id'              => $response->getPaymentId(),
				'token'           => $response->getToken(),
				'tokenValidUntil' => $response->getValidUntil(),
			)
		);

		$order->save_meta_data();

		// Save all line item IDs generated by Zaver.
		foreach ( $response->getLineItems() as $item ) {
			$meta = $item->getMerchantMetadata();

			if ( isset( $meta['orderItemId'] ) ) {
				wc_add_order_item_meta( $meta['orderItemId'], '_zaver_line_item_id', $item->getId(), true );
			}
		}

		Log::logger()->debug(
			'Created Zaver payment request',
			array(
				'orderId'   => $order->get_id(),
				'paymentId' => $response->getPaymentId(),
			)
		);

		do_action( 'zco_after_process_payment', $payment, $order, $response );
	}

	/**
	 * Get the title for the purchase.
	 *
	 * @param WC_Order $order The order to get the title for.
	 * @return string
	 */
	private static function get_purchase_title( $order ) {
		$items = $order->get_items();

		// If there's only one order item, return it as title.
		// If there's multiple order items, return a generic title.
		// translators: %s is the order number.
		$title = count( $items ) === 1 ? reset( $items )->get_name() : sprintf( __( 'Order %s', 'zco' ), $order->get_order_number() );

		return apply_filters( 'zco_payment_purchase_title', $title, $order );
	}

	/**
	 * Get the callback URL for the payment.
	 *
	 * @param WC_Order $order The order to get the callback URL for.
	 * @return string|null
	 */
	private static function get_callback_url( $order ) {
		if ( ! Helper::is_https() ) {
			return null;
		}

		return add_query_arg(
			array(
				'wc-api' => 'zaver_payment_callback',
				'key'    => $order->get_order_key(),
			),
			home_url()
		);
	}

	/**
	 * Prepare a line item for the payment.
	 *
	 * @param LineItem              $zaver_item The Zaver line item to prepare.
	 * @param WC_Order_Item_Product $wc_item The WooCommerce line item to prepare.
	 * @return void
	 */
	private static function prepare_line_item( $zaver_item, $wc_item ) {
		$tax         = (float) $wc_item->get_total_tax();
		$total_price = (float) $wc_item->get_total() + $tax;
		$unit_price  = $total_price / $wc_item->get_quantity();
		$product     = $wc_item->get_product();

		$zaver_item
			->setUnitPrice( $unit_price )
			->setTotalAmount( $total_price )
			->setTaxRatePercent( Helper::get_line_item_tax_rate( $wc_item ) )
			->setTaxAmount( $tax )
			->setItemType( Helper::get_zaver_item_type( $product ) )
			->setMerchantReference( $product->get_sku() );

		do_action( 'zco_process_payment_line_item', $zaver_item, $wc_item );
	}

	/**
	 * Prepare a shipping item for the payment.
	 *
	 * @param LineItem               $zaver_item The Zaver line item to prepare.
	 * @param WC_Order_Item_Shipping $wc_item The WooCommerce line item to prepare.
	 * @return void
	 */
	private static function prepare_shipping( $zaver_item, $wc_item ) {
		$tax         = (float) $wc_item->get_total_tax();
		$total_price = (float) $wc_item->get_total() + $tax;
		$unit_price  = $total_price / $wc_item->get_quantity();

		$zaver_item
			->setUnitPrice( $unit_price )
			->setTotalAmount( $total_price )
			->setTaxRatePercent( Helper::get_line_item_tax_rate( $wc_item, true ) )
			->setTaxAmount( $tax )
			->setItemType( ItemType::SHIPPING )
			->setMerchantReference( $wc_item->get_method_id() );

		do_action( 'zco_process_payment_shipping', $zaver_item, $wc_item );
	}

	/**
	 * Prepare a fee item for the payment.
	 *
	 * @param LineItem          $zaver_item The Zaver line item to prepare.
	 * @param WC_Order_Item_Fee $wc_item The WooCommerce line item to prepare.
	 * @return void
	 */
	private static function prepare_fee( $zaver_item, $wc_item ) {
		$tax         = (float) $wc_item->get_total_tax();
		$total_price = (float) $wc_item->get_total() + $tax;
		$unit_price  = $total_price / $wc_item->get_quantity();

		$zaver_item
			->setUnitPrice( $unit_price )
			->setTotalAmount( $total_price )
			->setTaxRatePercent( Helper::get_line_item_tax_rate( $wc_item ) )
			->setTaxAmount( $tax )
			->setItemType( ItemType::FEE );

		do_action( 'zco_process_payment_fee', $zaver_item, $wc_item );
	}

	/**
	 * Prepare a coupon item for the payment.
	 *
	 * @param LineItem             $zaver_item The Zaver line item to prepare.
	 * @param WC_Order_Item_Coupon $wc_item The WooCommerce line item to prepare.
	 * @return void
	 */
	private static function prepare_coupon( $zaver_item, $wc_item ) {
		$tax         = (float) $wc_item->get_discount_tax();
		$total_price = (float) $wc_item->get_discount() + $tax;
		$unit_price  = $total_price / $wc_item->get_quantity();

		$zaver_item
			->setUnitPrice( $unit_price )
			->setTotalAmount( $total_price )
			->setTaxRatePercent( Helper::get_line_item_tax_rate( $wc_item ) )
			->setTaxAmount( $tax )
			->setItemType( ItemType::DISCOUNT );

		do_action( 'zco_process_payment_coupon', $zaver_item, $wc_item );
	}

	/**
	 * Handle the response from Zaver.
	 *
	 * @throws Exception If the order key is invalid, the payment ID is missing, or the payment ID does not match.
	 *
	 * @param WC_Order                   $order The order to handle the response for.
	 * @param PaymentStatusResponse|null $payment_status The payment status response.
	 * @param bool                       $redirect Whether to redirect the user.
	 * @return void
	 */
	public static function handle_response( $order, $payment_status = null, $redirect = true ) {

		// TODO: I believe what they meant here is to check for if $order->get_date_paid() is not null.
		// Ignore orders that are already paid.
		if ( ! $order->needs_payment() ) {
			return;
		}

		// Ensure that the order key is correct.
		$key = filter_input( INPUT_GET, 'key', FILTER_SANITIZE_SPECIAL_CHARS );
		if ( ! empty( $key ) || ! hash_equals( $order->get_order_key(), $key ) ) {
			throw new Exception( 'Invalid order key' );
		}

		$payment = $order->get_meta( '_zaver_payment' );
		if ( ! isset( $payment['id'] ) ) {
			throw new Exception( 'Missing payment ID on order' );
		}

		if ( null === $payment_status ) {
			$payment_status = Plugin::gateway()->api()->getPaymentStatus( $payment['id'] );
		} elseif ( $payment_status->getPaymentId() !== $payment['id'] ) {
			throw new Exception( 'Mismatching payment ID' );
		}

		do_action( 'zco_process_payment_handle_response', $order, $payment_status, $redirect );

		switch ( $payment_status->getPaymentStatus() ) {
			case PaymentStatus::SETTLED:
				// translators: %s is the payment ID.
				$order->add_order_note( sprintf( __( 'Successful payment with Zaver - payment ID: %s', 'zco' ), $payment_status->getPaymentId() ) );
				$order->payment_complete( $payment_status->getPaymentId() );
				Log::logger()->info(
					'Successful payment with Zaver',
					array(
						'orderId'   => $order->get_id(),
						'paymentId' => $payment_status->getPaymentId(),
					)
				);
				break;

			case PaymentStatus::CANCELLED:
				Log::logger()->info(
					'Zaver Payment was cancelled',
					array(
						'orderId'   => $order->get_id(),
						'paymentId' => $payment_status->getPaymentId(),
					)
				);

				if ( $redirect ) {
					wp_safe_redirect( $order->get_cancel_order_url() );
					exit;
				}

				$order->update_status( 'cancelled', __( 'Zaver payment was cancelled - cancelling order', 'zco' ) );
				break;

			case PaymentStatus::CREATED:
				Log::logger()->debug(
					'Zaver Payment is still in CREATED state',
					array(
						'orderId'   => $order->get_id(),
						'paymentId' => $payment_status->getPaymentId(),
					)
				);

				if ( $redirect ) {
					wp_safe_redirect( $order->get_checkout_payment_url( true ) );
					exit;
				}

				// Do nothing.
				break;
		}
	}
}
